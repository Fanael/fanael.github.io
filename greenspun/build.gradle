// Copyright Â© 2021-2022  Fanael Linithien
// SPDX-License-Identifier: AGPL-3.0-or-later
import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "application"
    id "com.github.spotbugs" version "5.2.0"
    id "org.checkerframework" version "0.6.34" apply false
}

ext.withCF = project.hasProperty("withCF")

if (ext.withCF) {
    apply plugin: "org.checkerframework"
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly group: "com.github.spotbugs", name: "spotbugs-annotations", version: "4.8.0"
    compileOnly group: "org.checkerframework", name: "checker-qual", version: "3.39.0"
    compileOnly project(":auki")
    annotationProcessor project(":auki")
    testCompileOnly group: "com.github.spotbugs", name: "spotbugs-annotations", version: "4.8.0"
    testAnnotationProcessor project(":auki")
    testCompileOnly group: "org.checkerframework", name: "checker-qual", version: "3.39.0"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.10.0"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-params", version: "5.10.0"
    testImplementation group: "org.assertj", name: "assertj-core", version: "3.24.2"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.10.0"
}

spotbugs {
    toolVersion.set "4.8.0"
    showProgress.set true
    includeFilter.set file("spotbugs-include.xml")
    excludeFilter.set file("spotbugs-exclude.xml")
    effort.set Effort.MAX
    reportLevel.set Confidence.LOW
}

application {
    mainModule.set "greenspun"
    mainClass.set "greenspun.cli.Main"
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(21)
}

jar.manifest.attributes "Main-Class": application.mainClass.get()

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-Xlint",
            "-Xlint:-processing,-requires-automatic,-serial",
    ]
}

javadoc {
    options.addStringOption("-show-module-contents", "all")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

if (ext.withCF) {
    checkerFramework {
        extraJavacArgs = [
                "-Alint=redundantNullComparison",
                "-AshowSuppressWarningsStrings",
                "-AwarnUnneededSuppressions",
                "-ArequirePrefixInWarningSuppressions",
        ]
        checkers = ["org.checkerframework.checker.nullness.NullnessChecker"]
    }
}
