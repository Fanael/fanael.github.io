<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" version="2.0"><channel><atom:link href="https://fanael.github.io/feed.xml" rel="self" type="application/rss+xml"/><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>3</sy:updateFrequency><description>Latest posts from Fanael's random ruminations</description><link>https://fanael.github.io</link><title>Fanael's random ruminations</title><language>en</language><lastBuildDate>Tue, 30 Mar 2021 16:11:39 GMT</lastBuildDate><copyright>Copyright Â© 2019-2021 Fanael Linithien</copyright><item><title>Current Stockfish on Windows 98?!</title><link>https://fanael.github.io/stockfish-on-windows-98.html</link><guid isPermaLink="false">https://fanael.github.io/stockfish-on-windows-98.html</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate><description>Porting current versions of Stockfish to Windows 98: is it possible, and how much tinkering does it require?</description></item><item><title>The legend of "x86 CPUs decode instructions into RISC form internally"</title><link>https://fanael.github.io/is-x86-risc-internally.html</link><guid isPermaLink="false">https://fanael.github.io/is-x86-risc-internally.html</guid><pubDate>Tue, 30 Jun 2020 00:00:00 GMT</pubDate><description>A dive into what x86 instruction are decoded into various processors, to determine the truth of the idea that they're just RISC-like internally.</description></item><item><title>Blue Ridge errata #1: root pointers during evacuation</title><link>https://fanael.github.io/blue-ridge-errata-1.html</link><guid isPermaLink="false">https://fanael.github.io/blue-ridge-errata-1.html</guid><pubDate>Sat, 8 Feb 2020 00:00:00 GMT</pubDate><description>Explanation and solution of a serious Blue Ridge design problem involving root pointers during evacuation</description></item><item><title>How to: accidentally break empty base optimization</title><link>https://fanael.github.io/breaking-empty-base-optimization.html</link><guid isPermaLink="false">https://fanael.github.io/breaking-empty-base-optimization.html</guid><pubDate>Fri, 20 Dec 2019 00:00:00 GMT</pubDate><description>Empty base optimization in C++ is very brittle, how (not) to break it?</description></item><item><title>Blue Ridge status update: December 2019</title><link>https://fanael.github.io/blue-ridge-status-update-dec-2019.html</link><guid isPermaLink="false">https://fanael.github.io/blue-ridge-status-update-dec-2019.html</guid><pubDate>Sun, 8 Dec 2019 00:00:00 GMT</pubDate><description>Status update on the implementation of the Blue Ridge garbage collector as of December 2019</description></item><item><title>Hardware prefetching in Pentium III</title><link>https://fanael.github.io/hardware-prefetching-in-pentium-iii.html</link><guid isPermaLink="false">https://fanael.github.io/hardware-prefetching-in-pentium-iii.html</guid><pubDate>Fri, 25 Oct 2019 00:00:00 GMT</pubDate><description>Determining the existence and discovering the basic characteristics of the hardware prefetcher in Pentium III</description></item><item><title>A simple incremental low-pause GC design</title><link>https://fanael.github.io/incremental-low-pause-gc.html</link><guid isPermaLink="false">https://fanael.github.io/incremental-low-pause-gc.html</guid><pubDate>Sat, 12 Oct 2019 00:00:00 GMT</pubDate><description>Notes on a mostly-concurrent single-threaded incremental regionalized mark-copy garbage collector design.</description></item></channel></rss>